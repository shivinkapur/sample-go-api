/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.17
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"

	"github.com/gin-gonic/gin"
	"github.com/shivinkapur/sample-go-api/persistence"
)

const PATH_PARAM_USERNAME = "username"

type UserAPI struct {
}

// Post /api/v3/user
// Create user
func (api *UserAPI) CreateUser(c *gin.Context) {
	// read the request body
	content, err := io.ReadAll(c.Request.Body)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Invalid request" + err.Error()})
		return
	}

	var user User
	err = json.Unmarshal([]byte(content), &user)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Invalid request" + err.Error()})
		return
	}

	persistenceModel, err := convertNewUserToPersistenceModel(user)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Invalid request" + err.Error()})
		return
	}

	repository := persistence.GetRepository()
	result, err := repository.AddUser(persistenceModel)
	if err != nil {
		if errors.Is(err, persistence.ErrUserAlreadyExists) {
			log.Printf("ERROR: %+v", err)
			c.AbortWithStatusJSON(http.StatusConflict, gin.H{"message": "User already exists"})
			return
		}
		log.Printf("ERROR: %+v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": "Internal Server Error"})
		return
	}

	userUIModel, err := convertPersistenceModelToUser(result)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": "Internal Server Error"})
	}

	c.JSON(http.StatusCreated, userUIModel)
}

// Post /api/v3/user/createWithList
// Creates list of users with given input array
func (api *UserAPI) CreateUsersWithListInput(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Delete /api/v3/user/:username
// Delete user
func (api *UserAPI) DeleteUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v3/user/:username
// Get user by user name
func (api *UserAPI) GetUserByName(c *gin.Context) {

	username := strings.TrimSpace(c.Param(PATH_PARAM_USERNAME))

	log.Print("Username is: ", username)

	repository := persistence.GetRepository()
	user, err := repository.GetUserByUserName(username)
	if err != nil {
		if errors.Is(err, persistence.ErrUserNotFound) {
			log.Printf("ERROR: %+v", err)
			c.AbortWithError(http.StatusNotFound, fmt.Errorf("User not found: %q", username))
			return
		}
		log.Printf("ERROR: %+v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": "Internal Server Error"})
	}

	userUIModel, err := convertPersistenceModelToUser(user)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.JSON(http.StatusInternalServerError, gin.H{"message": "Internal Server Error"})
	}

	c.JSON(http.StatusOK, userUIModel)
}

// Get /api/v3/user/login
// Logs user into the system
func (api *UserAPI) LoginUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Get /api/v3/user/logout
// Logs out current logged in user session
func (api *UserAPI) LogoutUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}

// Put /api/v3/user/:username
// Update user
func (api *UserAPI) UpdateUser(c *gin.Context) {
	// Your handler implementation
	c.JSON(200, gin.H{"status": "OK"})
}
