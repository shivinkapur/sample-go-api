/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.17
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"io"
	"log"
	"net/http"
	"strings"
	"sync"
	"sync/atomic"

	"github.com/gin-gonic/gin"
)

const PATH_PARAM_QUESTION_ID = "questionId"

type QuestionAPI struct {
}

type Questions struct {
	question map[string]Question
	mu       sync.RWMutex
}

func NewQuestions() *Questions {
	q := &Questions{
		question: make(map[string]Question),
	}

	q.question["1"] = Question{
		Id:      "1",
		Title:   "Question 1",
		Content: "asbc",
		Creator: "1276-47261",
		Votes:   12,
	}

	q.question["2"] = Question{
		Id:      "2",
		Title:   "Question 2",
		Content: "asbc",
		Creator: "1276-474121",
		Votes:   31,
	}

	return q
}

var questions = NewQuestions()

// Post /api/v3/questions
// Create question
func (api *QuestionAPI) CreateQuestion(c *gin.Context) {
	// read the request body
	content, err := io.ReadAll(c.Request.Body)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Invalid request" + err.Error()})
		return
	}

	var question Question
	err = json.Unmarshal([]byte(content), &question)
	if err != nil {
		log.Printf("ERROR: %+v", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Invalid request" + err.Error()})
		return
	}

	questionId := question.Id

	questions.mu.RLock()
	_, ok := questions.question[questionId]
	if ok {
		log.Printf("Error: question already exists")
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Question already exists"})
	}
	questions.mu.RUnlock()

	questions.mu.Lock()
	questions.question[questionId] = question
	questions.mu.Unlock()

	// Your handler implementation
	c.JSON(http.StatusCreated, gin.H{"status": "OK"})
}

// Get /api/v3/questions
func (api *QuestionAPI) GetAllQuestions(c *gin.Context) {
	log.Printf("Questions : %v", questions)

	var results []Question
	questions.mu.RLock()
	for _, question := range questions.question {
		results = append(results, question)
	}
	questions.mu.RUnlock()

	c.JSON(http.StatusOK, results)
}

// Get /api/v3/question/:questionId
// Get question by id
func (api *QuestionAPI) GetQuestionById(c *gin.Context) {
	questionId := strings.TrimSpace(c.Param(PATH_PARAM_QUESTION_ID))
	if questionId == "" {
		log.Printf("Error: question id not present")
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Question id not present"})
	}

	questions.mu.RLock()
	questionResult := questions.question[questionId]
	questions.mu.RUnlock()

	c.JSON(http.StatusOK, questionResult)
}

// Post /api/v3/question/:questionId/upvote
// Upvote a question
func (api *QuestionAPI) UpvoteQuestion(c *gin.Context) {
	questionId := strings.TrimSpace(c.Param(PATH_PARAM_QUESTION_ID))
	if questionId == "" {
		log.Printf("Error: question id not present")
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"message": "Question id not present"})
	}

	questions.mu.RLock()
	question := questions.question[questionId]
	questions.mu.RUnlock()

	currentVoteCount := question.Votes
	newVoteCount := upvote(currentVoteCount)

	questions.mu.Lock()
	question.Votes = newVoteCount
	questions.question[questionId] = question
	questions.mu.Unlock()

	c.JSON(http.StatusOK, gin.H{"status": "OK"})
}

func upvote(vountCount int32) int32 {
	return atomic.AddInt32(&vountCount, 1)
}
