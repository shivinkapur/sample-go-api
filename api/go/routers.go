/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.17
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the PetAPI part of the API
	PetAPI PetAPI
	// Routes for the StoreAPI part of the API
	StoreAPI StoreAPI
	// Routes for the UserAPI part of the API
	UserAPI UserAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{
		{
			"AddPet",
			http.MethodPost,
			"/api/v3/pet",
			handleFunctions.PetAPI.AddPet,
		},
		{
			"DeletePet",
			http.MethodDelete,
			"/api/v3/pet/:petId",
			handleFunctions.PetAPI.DeletePet,
		},
		{
			"FindPetsByStatus",
			http.MethodGet,
			"/api/v3/pet/findByStatus",
			handleFunctions.PetAPI.FindPetsByStatus,
		},
		{
			"FindPetsByTags",
			http.MethodGet,
			"/api/v3/pet/findByTags",
			handleFunctions.PetAPI.FindPetsByTags,
		},
		{
			"GetPetById",
			http.MethodGet,
			"/api/v3/pet/:petId",
			handleFunctions.PetAPI.GetPetById,
		},
		{
			"UpdatePet",
			http.MethodPut,
			"/api/v3/pet",
			handleFunctions.PetAPI.UpdatePet,
		},
		{
			"UpdatePetWithForm",
			http.MethodPost,
			"/api/v3/pet/:petId",
			handleFunctions.PetAPI.UpdatePetWithForm,
		},
		{
			"UploadFile",
			http.MethodPost,
			"/api/v3/pet/:petId/uploadImage",
			handleFunctions.PetAPI.UploadFile,
		},
		{
			"DeleteOrder",
			http.MethodDelete,
			"/api/v3/store/order/:orderId",
			handleFunctions.StoreAPI.DeleteOrder,
		},
		{
			"GetInventory",
			http.MethodGet,
			"/api/v3/store/inventory",
			handleFunctions.StoreAPI.GetInventory,
		},
		{
			"GetOrderById",
			http.MethodGet,
			"/api/v3/store/order/:orderId",
			handleFunctions.StoreAPI.GetOrderById,
		},
		{
			"PlaceOrder",
			http.MethodPost,
			"/api/v3/store/order",
			handleFunctions.StoreAPI.PlaceOrder,
		},
		{
			"CreateUser",
			http.MethodPost,
			"/api/v3/user",
			handleFunctions.UserAPI.CreateUser,
		},
		{
			"CreateUsersWithListInput",
			http.MethodPost,
			"/api/v3/user/createWithList",
			handleFunctions.UserAPI.CreateUsersWithListInput,
		},
		{
			"DeleteUser",
			http.MethodDelete,
			"/api/v3/user/:username",
			handleFunctions.UserAPI.DeleteUser,
		},
		{
			"GetUserByName",
			http.MethodGet,
			"/api/v3/user/:username",
			handleFunctions.UserAPI.GetUserByName,
		},
		{
			"LoginUser",
			http.MethodGet,
			"/api/v3/user/login",
			handleFunctions.UserAPI.LoginUser,
		},
		{
			"LogoutUser",
			http.MethodGet,
			"/api/v3/user/logout",
			handleFunctions.UserAPI.LogoutUser,
		},
		{
			"UpdateUser",
			http.MethodPut,
			"/api/v3/user/:username",
			handleFunctions.UserAPI.UpdateUser,
		},
	}
}
