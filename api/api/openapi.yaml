openapi: 3.0.2
info:
  contact:
    email: apiteam@swagger.io
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Petstore - OpenAPI 3.0
  version: 1.0.17
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: /api/v3
tags:
- description: Operations about question
  name: question
- description: Operations about user
  name: user
paths:
  /question/{questionId}/upvote:
    post:
      description: Upvote a question
      operationId: upvoteQuestion
      parameters:
      - description: The questionId that needs to be fetched.
        explode: false
        in: path
        name: questionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        default:
          description: successful operation
      summary: Upvote a question
      tags:
      - question
  /question/{questionId}:
    get:
      description: ""
      operationId: getQuestionById
      parameters:
      - description: The questionId that needs to be fetched.
        explode: false
        in: path
        name: questionId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: successful operation
        "400":
          description: Invalid question id supplied
        "404":
          description: Question not found
      summary: Get question by id
      tags:
      - question
  /questions:
    get:
      operationId: getAllQuestions
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Questions'
          description: successful operation
        "500":
          description: Invalid username supplied
      tags:
      - question
    post:
      description: This can only be done by the logged in user.
      operationId: createQuestion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        description: Created question object
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: successful operation
      summary: Create question
      tags:
      - question
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
      - user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
    get:
      description: ""
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
      responses:
        default:
          description: successful operation
      summary: Update user
      tags:
      - user
components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
  schemas:
    User:
      example:
        firstName: John
        lastName: James
        password: "12345"
        userStatus: 1
        phone: "12345"
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        email: john@email.com
        username: theUser
      properties:
        id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          type: string
        username:
          example: theUser
          type: string
        firstName:
          example: John
          type: string
        lastName:
          example: James
          type: string
        email:
          example: john@email.com
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
      type: object
      xml:
        name: user
    Question:
      example:
        creator: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        votes: 23
        id: d290f1ee-6c54-4b01-90e6-d701748f0851
        title: question
        content: question
      properties:
        id:
          example: d290f1ee-6c54-4b01-90e6-d701748f0851
          format: uuid
          type: string
        title:
          example: question
          type: string
        content:
          example: question
          type: string
        creator:
          format: uuid
          type: string
        votes:
          example: 23
          type: integer
      type: object
    Questions:
      items:
        $ref: '#/components/schemas/Question'
      type: array
    Tag:
      properties:
        id:
          format: uuid
          type: string
        name:
          type: string
      type: object
      xml:
        name: tag
    ApiResponse:
      properties:
        code:
          format: int32
          type: integer
        type:
          type: string
        message:
          type: string
      type: object
      xml:
        name: '##default'
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
